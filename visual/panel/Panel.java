package visual.panel;

import java.awt.Graphics;
import javax.swing.JPanel;
import input.ClickComponent;
import input.Detectable;
import input.KeyComponent;
import visual.frame.Frame;

/**
 * This abstract class defines the base behavior of Panel objects in the SoftwareVisualInterface library,
 * handling input via the Mouse and Keyboard and abstracting many low-details away.
 * 
 * Panel objects need to be placed inside of Frame objects, and specific implementations of this abstract class
 * will provide tools for specifying how to manipulate the appearance of the Panel.
 * 
 * @author Mac Clevinger
 *
 */

public abstract class Panel extends JPanel{

//---  Instance Variables   -------------------------------------------------------------------
	
	/** Frame object that houses this Panel object; may be null if unassociated, parentFrame may not always show this Panel*/
	private Frame parentFrame;
	/** ClickComponent object that handles the user's mouse inputs, calling mouseEvent() in the Panel object containing it*/
	private ClickComponent mouseEvent;
	/** KeyComponent object that handles the user's key inputs, calling keyEvent() in the Panel object containing it*/
	private KeyComponent keyPress;
	
//---  Constructor Support   ------------------------------------------------------------------
	
	/**
	 * This method handles common actions that all Panel objects are expected to undertake,
	 * abstracting some aspects of preparing the Panel in implementations of the abstract class.
	 * 
	 * @param x - int value representing the x position of this Panel object's origin in the containing Frame object
	 * @param y - int value representing the y position of this Panel object's origin in the containing Frame object
	 * @param width - int value representing the width of this Panel object
	 * @param height - int value representing the height of this Panel object
	 */
	
	public void initiate(int x, int y, int width, int height) {
		mouseEvent = new ClickComponent(this);
		keyPress = new KeyComponent(this);
		setDoubleBuffered(true);
		setFocusable(true);
		setLocation(x, y);
		setSize(width, height);
		setVisible(true);
	}
	
//---  Operations   ---------------------------------------------------------------------------
	
	public abstract void paintComponent(Graphics g);

	/**
	 * This method is triggered whenever the Panel object detects user interaction
	 * via the Mouse; exact implementation of response is left to the implementation
	 * of the Panel abstract class (or left to the creation of an object of that class
	 * by overriding this method or others to tailor-fit behavior to different Panels.)
	 * 
	 * @param event - int value representing the code generated by the user's action (-1 by default represents no object was selected)
	 */
	
	public abstract void clickEvent(int event);
	
	/**
	 * This method is triggered whenever the Panel object detects user interaction
	 * via the KeyBoard; exact implementation of response is left to the implementation
	 * of the Panel abstract class (or left to the creation of an object of that class
	 * by overriding this method or others to tailor-fit behavior to different Panels.)
	 * 
	 * @param event - char value representing which key was pressed by the user; special keys may generate strange values.
	 */
	
	public abstract void keyEvent(char event);

	/**
	 * This method instructs the ClickComponent object of this class to reset the regions that
	 * have been assigned a particular value to return if clicked. (See documentation of
	 * ClickComponent for further information on its functionality.)
	 * 
	 * Effectively resets how this Panel object responds to user mouse-clicking.
	 * 
	 */
	
	public void resetDetectionRegions() {
		mouseEvent.resetDetectionRegions();
	}

//---  Setter Methods   -----------------------------------------------------------------------

	/**
	 * Setter method to assign a provided Frame object as this Panel's containing Frame.
	 * 
	 * @param fram - Frame object which this Panel object will have reference to.
	 */
	
	public void setParentFrame(Frame fram) {
		parentFrame = fram;
		
	}
	
//---  Getter Methods   -----------------------------------------------------------------------
	
	/**
	 * Getter method that requests the X position of this Panel object's origin in the
	 * Frame that contains it.
	 * 
	 * @return - Returns an int value representing the X position of this Panel object's origin in the Frame that contains it.
	 */
	
	public int getPanelXLocation() {
		return getX();
	}
	
	/**
	 * Getter method that requests the Y position of this Panel object's origin in the
	 * Frame that contains it.
	 * 
	 * @return - Returns an int value representing the Y position of this Panel object's origin in the Frame that contains it.
	 */
	
	public int getPanelYLocation() {
		return getY();
	}
	
//---  Adder Methods   ------------------------------------------------------------------------
	
	/**
	 * Adder method that takes a provided Detectable object and passes it to this Panel's
	 * ClickComponent to define a new region of the Panel that, when clicked, will generate
	 * a code value defined by the Detectable object (this is what is given to clickEvent()).
	 * 
	 * If there is a collision of code values (two regions assigned the same value), the
	 * new Detectable object will not be added and the method will return false.
	 * 
	 * @param detect - Detectable object that represents a region of the screen 
	 * @return - returns a boolean value representing the result of this operation; true if detect was added, false otherwise.
	 */
	
	public boolean addClickRegion(Detectable detect) {
		return mouseEvent.addClickRegion(detect);
	}
	
//---  Remove Methods   -----------------------------------------------------------------------

	/**
	 * This method removes a Detectable object from the ClickComponent object that possesses
	 * the same code as that which is provided to this method.
	 * 
	 * @param code - int value representing the code of the Detectable object to remove from this Panel's ClickComponent.
	 * @return - Returns a boolean value representing the result of this operation; true if a Detectable was removed,
	 * false if no matching object was found.
	 */
	
	public boolean removeClickRegion(int code) {
		return mouseEvent.removeDetectionRegion(code);
	}
	
	/**
	 * This method removes all Detectable objects from the ClickComponent object that intersect the
	 * point defined by the input to this method.
	 * 
	 * @param x - int value representing the x coordinate of the point that removes all Detectable objects intersecting it
	 * @param y - int value representing the y coordinate of the point that removes all Detectable objects intersecting it
	 * @return - Returns a boolean value representing the result of this operation; true if a Detectable was removed, false
	 * if no matching objects were found. 
	 */
	
	public boolean removeClickRegions(int x, int y) {
		return mouseEvent.removeDetectionRegions(x, y);
	}
	
}
